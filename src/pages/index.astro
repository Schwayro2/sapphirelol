---
import BaseHead from '../components/BaseHead.astro';
import Header from '../components/Header.astro';
import Footer from '../components/Footer.astro';
import { SITE_TITLE, SITE_DESCRIPTION } from '../consts';
---

<!doctype html>
<html lang="en">
  <head>
    <BaseHead title={SITE_TITLE} description={SITE_DESCRIPTION} />
    <style is:global>
      @import url('https://fonts.googleapis.com/css2?family=Chakra+Petch:wght@300;400;500;600;700&display=swap');
      
      :root {
        --plasma-1: #6366f1;
        --plasma-2: #ec4899;
        --plasma-3: #8b5cf6;
        --bg-dark: #0b081c;
        --text-primary: #f0f0ff;
        --text-glow: rgba(224, 231, 255, 0.1);
        --gradient-1: linear-gradient(135deg, var(--plasma-1), var(--plasma-2), var(--plasma-3));
      }

      * {
        box-sizing: border-box;
        margin: 0;
        padding: 0;
      }

      body {
        font-family: 'Chakra Petch', sans-serif;
        background: var(--bg-dark);
        color: var(--text-primary);
        overflow-x: hidden;
      }

      /* Matrix Reveal Animation */
      @keyframes matrixReveal {
        0% { clip-path: polygon(0 0, 100% 0, 100% 0, 0 0); }
        100% { clip-path: polygon(0 0, 100% 0, 100% 100%, 0 100%); }
      }

      /* Plasma Core Animation */
      @keyframes plasmaCore {
        0% { filter: hue-rotate(0deg); }
        100% { filter: hue-rotate(360deg); }
      }

      .hero-section {
        min-height: 100vh;
        display: flex;
        align-items: center;
        justify-content: center;
        position: relative;
        overflow: hidden;
      }

      .hero-bg {
        position: absolute;
        width: 150vw;
        height: 150vh;
        background: var(--gradient-1);
        mix-blend-mode: screen;
        animation: plasmaCore 20s linear infinite;
        opacity: 0.15;
        filter: blur(100px);
      }

      .hero-content {
        text-align: center;
        position: relative;
        z-index: 2;
        padding: 4rem;
      }

      .hero-title {
        font-size: 5rem;
        background: var(--gradient-1);
        -webkit-background-clip: text;
        background-clip: text;
        color: transparent;
        margin-bottom: 2rem;
        text-shadow: 0 0 50px var(--plasma-1);
        animation: matrixReveal 2s cubic-bezier(0.87, 0, 0.13, 1) forwards;
        line-height: 1;
      }

      .hero-subtitle {
        font-size: 1.5rem;
        color: var(--text-primary);
        opacity: 0.8;
        margin-bottom: 3rem;
        animation: fadeInUp 1s 0.5s forwards;
        opacity: 0;
      }

      /* Games Grid */
      .games-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
        gap: 4rem;
        padding: 8rem 2rem;
        max-width: 1400px;
        margin: 0 auto;
      }

      .game-card {
        position: relative;
        border-radius: 20px;
        overflow: hidden;
        transform: translateZ(0);
        transition: transform 0.6s cubic-bezier(0.23, 1, 0.32, 1);
      }

      .game-card::before {
        content: '';
        position: absolute;
        inset: 0;
        background: var(--gradient-1);
        opacity: 0.3;
        z-index: -1;
      }

      .game-card::after {
        content: '';
        position: absolute;
        inset: 1px;
        background: var(--bg-dark);
        border-radius: 20px;
        z-index: 1;
      }

      .game-content {
        position: relative;
        z-index: 2;
        padding: 2.5rem;
        background: linear-gradient(180deg, rgba(11, 8, 28, 0.8) 0%, rgba(11, 8, 28, 0.9) 100%);
      }

      .game-logo {
        width: 160px;
        height: 160px;
        margin: 0 auto 2rem;
        filter: drop-shadow(0 0 30px var(--plasma-1));
        transform: translateY(50px);
        opacity: 0;
        transition: all 0.6s cubic-bezier(0.23, 1, 0.32, 1);
      }

      .game-card:hover .game-logo {
        transform: translateY(0) rotate(-5deg);
        filter: drop-shadow(0 0 50px var(--plasma-2));
      }

      .game-title {
        font-size: 2rem;
        background: var(--gradient-1);
        -webkit-background-clip: text;
        background-clip: text;
        color: transparent;
        margin-bottom: 1.5rem;
        transform: translateY(30px);
        opacity: 0;
        transition: all 0.6s cubic-bezier(0.23, 1, 0.32, 1);
      }

      .game-card:hover .game-title {
        transform: translateY(0);
      }

      /* Particle Animation */
      .particles {
        position: absolute;
        width: 100%;
        height: 100%;
        pointer-events: none;
      }

      .particle {
        position: absolute;
        background: var(--gradient-1);
        border-radius: 50%;
        filter: blur(15px);
        animation: float 8s infinite;
      }

      @keyframes float {
        0%, 100% { transform: translate(0, 0); }
        25% { transform: translate(10px, 10px); }
        50% { transform: translate(-10px, 20px); }
        75% { transform: translate(20px, -10px); }
      }

      /* Animations */
      @keyframes fadeInUp {
        from { opacity: 0; transform: translateY(30px); }
        to { opacity: 1; transform: translateY(0); }
      }

      .animate-entry {
        opacity: 0;
        transform: translateY(30px);
        transition: all 0.8s cubic-bezier(0.23, 1, 0.32, 1);
      }

      .animate-entry.active {
        opacity: 1;
        transform: translateY(0);
      }
    </style>
  </head>
  <body>
    <Header />
    
    <main>
      <section class="hero-section">
        <div class="particles">
          <div class="particle" style="top: 20%; left: 15%; width: 120px; height: 120px; animation-delay: -2s"></div>
          <div class="particle" style="top: 60%; right: 10%; width: 80px; height: 80px; animation-delay: -5s"></div>
        </div>
        
        <div class="hero-bg"></div>
        
        <div class="hero-content">
          <h1 class="hero-title">NEXT-LEVEL<br/>GAMING EXPERIENCE</h1>
          <p class="hero-subtitle">Elite performance enhancements for champion-tier players</p>
        </div>
      </section>

      <section class="games-grid">
        <!-- Fortnite -->
        <div class="game-card animate-entry">
          <div class="game-content">
            <img src="/fortnite-logo.webp" class="game-logo" alt="Fortnite" />
            <h3 class="game-title">Fortnite</h3>
          </div>
        </div>

        <!-- Valorant -->
        <div class="game-card animate-entry" style="transition-delay: 0.2s">
          <div class="game-content">
            <img src="/valorant-logo.webp" class="game-logo" alt="Valorant" />
            <h3 class="game-title">Valorant</h3>
          </div>
        </div>

        <!-- Warzone -->
        <div class="game-card animate-entry" style="transition-delay: 0.4s">
          <div class="game-content">
            <img src="/warzone-logo.webp" class="game-logo" alt="Warzone" />
            <h3 class="game-title">Warzone</h3>
          </div>
        </div>

        <!-- Apex Legends -->
        <div class="game-card animate-entry" style="transition-delay: 0.6s">
          <div class="game-content">
            <img src="/apex-logo.webp" class="game-logo" alt="Apex Legends" />
            <h3 class="game-title">Apex Legends</h3>
          </div>
        </div>
      </section>
    </main>

    <Footer />

    <script>
      document.addEventListener('DOMContentLoaded', () => {
        // Matrix-style reveal observer
        const observer = new IntersectionObserver((entries) => {
          entries.forEach(entry => {
            if (entry.isIntersecting) {
              entry.target.classList.add('active');
            }
          });
        }, { threshold: 0.15 });

        // Particle interaction
        document.addEventListener('mousemove', (e) => {
          const particles = document.querySelectorAll('.particle');
          particles.forEach(particle => {
            const speed = 0.03;
            const x = (window.innerWidth - e.clientX) * speed;
            const y = (window.innerHeight - e.clientY) * speed;
            particle.style.transform = `translate(${x}px, ${y}px)`;
          });
        });

        // Activate animations
        document.querySelectorAll('.animate-entry').forEach(el => observer.observe(el));
      });
    </script>
  </body>
</html>
